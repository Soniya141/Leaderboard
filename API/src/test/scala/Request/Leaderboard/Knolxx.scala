package Request.Leaderboard
import API.Utils.Environment.{URL, baseURL}
import API.Utils.Headers.commonHeader
import io.gatling.core.Predef.{feed, _}
import io.gatling.http.Predef._
object Knolxx {
  val manageSession = scenario("Manage Session")
    .exec(http("Manage session- Fetch the user's knolx details")
      .get(URL + "/v02/sessions/manage?pageNumber=1&pageSize=10&filter=requested&search=")
      .formParam("pageNumber", 1)
      .formParam("pageSize", 10)
      .formParam("filter", "requested")
      .headers(commonHeader)
      .check(status is 200))
    .pause(3)
  val manageupcomingSession = scenario("Upcoming Session")
    .exec(http("manage upcoming session- Fetch the upcoming session information")
      .get(URL + "/v02/sessions/manage?pageNumber=1&pageSize=10&filter=upcoming&search=")
      .formParam("pageNumber", 1)
      .formParam("pageSize", 10)
      .formParam("filter", "upcoming")
      .headers(commonHeader)
      .check(status is 200))
    .pause(3)
  val managecompletedSession = scenario("Completed Session")
    .exec(http("Manage complete session- Fetch the completed session information")
      .get(URL + "/v02/sessions?pageNumber=1&pageSize=10&filter=past&search=")
      .formParam("pageNumber", 1)
      .formParam("pageSize", 10)
      .formParam("filter", "past")
      .headers(commonHeader)
      .check(status is 200))
    .pause(3)
  val manageSlot= scenario("Completed Session")
    .exec(http("Manage Slot- Fetch the completed session information")
      .get(URL + "/v02/slots/getFourMonths")
      .headers(commonHeader)
      .check(status is 200))
    .pause(3)
  val feedbackForm= scenario("Completed Session")
    .exec(http("Feedback Form- Fetch the feedback form details")
      .get(URL + "/v02/feedback-form/fetch?pageNumber=1&pageSize=1000&search=")
      .formParam("pageNumber", 1)
      .formParam("pageSize", 1000)
      .headers(commonHeader)
      .check(status is 200))
    .pause(3)
  val myupcomingSession = scenario("Completed Session")
    .exec(http("My Upcoming Session- Fetch the upcoming session information")
      .get(URL + "/v02/sessions/my?pageNumber=1&pageSize=1000&filter=upcoming")
      .formParam("pageNumber", 1)
      .formParam("pageSize", 1000)
      .formParam("filter","upcoming")
      .headers(commonHeader)
      .check(status is 200))
    .pause(3)
  val mypastSession = scenario("Completed Session")
    .exec(http("My Past Session- Fetch the past session information")
      .get(URL + "/v02/sessions/my?pageNumber=1&pageSize=1000&filter=past")
      .formParam("pageNumber", 1)
      .formParam("pageSize", 1000)
      .formParam("filter", "past")
      .headers(commonHeader)
      .check(status is 200))
    .pause(3)
  val bookASessionallUsers = scenario("Completed Session")
    .exec(http("Book a Session[all Users]- Fetch the users booked information")
      .get(URL + "/v02/allUsers")
      .headers(commonHeader)
      .check(status is 200))
    .pause(3)
  val bookASessionaStudio = scenario("Completed Session")
    .exec(http("Book a Session[Studio]- Fetch the studio booked information")
      .get("https://backend-radar.qa.go1percent.com/knoldus-backend/rest/radar-service/technology/studio")
      .headers(commonHeader)
      .check(status is 200))
    .pause(3)
  val pastSession= scenario("Completed Session")
    .exec(http("Past Session- Fetch the user's past knolx session information")
      .get(URL + "/v02/sessions?pageNumber=1&pageSize=1000&filter=past")
      .formParam("pageNumber", 1)
      .formParam("pageSize", 1000)
      .formParam("filter", "past")
      .headers(commonHeader)
      .check(status is 200))
    .pause(3)
}
